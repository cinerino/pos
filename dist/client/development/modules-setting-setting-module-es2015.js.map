{"version":3,"sources":["./app/modules/setting/components/pages/setting/setting.component.html","./app/modules/setting/components/pages/setting/setting.component.scss","./app/modules/setting/components/pages/setting/setting.component.ts","./app/modules/setting/setting-routing.module.ts","./app/modules/setting/setting.module.ts"],"names":[],"mappings":"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","file":"modules-setting-setting-module-es2015.js","sourcesContent":["export default \"<div class=\\\"contents-width mx-auto px-3 py-5\\\">\\n    <form *ngIf=\\\"settingForm\\\" [formGroup]=\\\"settingForm\\\">\\n        <div class=\\\"mb-4\\\">\\n            <h2 class=\\\"text-large mb-4 text-center font-weight-bold\\\">{{ 'setting.title' | translate }}</h2>\\n            <p class=\\\"mb-4 text-md-center\\\" [innerHTML]=\\\"'setting.read' | translate\\\"></p>\\n            <div class=\\\"p-3 bg-white\\\">\\n\\n                <div class=\\\"form-group\\\">\\n                    <div class=\\\"row align-items-center\\\">\\n                        <p class=\\\"col-md-4 py-2 text-md-right\\\">{{ 'common.theater' | translate }}</p>\\n                        <div class=\\\"col-md-8\\\">\\n                            <select class=\\\"form-control\\\" formControlName=\\\"theaterBranchCode\\\" (change)=\\\"changePosList()\\\">\\n                                <option value=\\\"\\\">{{ 'setting.unselected' | translate }}</option>\\n                                <option *ngFor=\\\"let theater of (master | async).theaters\\\"\\n                                    [value]=\\\"theater.branchCode\\\">{{ theater.name | changeLanguage }}</option>\\n                            </select>\\n                            <div *ngIf=\\\"settingForm.controls.theaterBranchCode.invalid && settingForm.controls.theaterBranchCode.touched\\\"\\n                                class=\\\"mt-2\\\">\\n                                <p *ngIf=\\\"settingForm.controls.theaterBranchCode.errors.required\\\" class=\\\"text-danger\\\">\\n                                    {{ 'form.validation.unselected' | translate }}</p>\\n                            </div>\\n                        </div>\\n                    </div>\\n                </div>\\n                <div class=\\\"form-group\\\">\\n                    <div class=\\\"row align-items-center\\\">\\n                        <p class=\\\"col-md-4 py-2 text-md-right\\\">{{ 'setting.pos' | translate }}</p>\\n                        <div class=\\\"col-md-8\\\">\\n                            <select class=\\\"form-control\\\" formControlName=\\\"posId\\\">\\n                                <option value=\\\"\\\">{{ 'setting.unselected' | translate }}</option>\\n                                <option *ngFor=\\\"let pos of posList\\\" [value]=\\\"pos.id\\\">{{ pos.name }}</option>\\n                            </select>\\n                            <div *ngIf=\\\"settingForm.controls.posId.invalid && settingForm.controls.posId.touched\\\"\\n                                class=\\\"mt-2\\\">\\n                                <p *ngIf=\\\"settingForm.controls.posId.errors.required\\\" class=\\\"text-danger\\\">\\n                                    {{ 'form.validation.unselected' | translate }}</p>\\n                            </div>\\n                        </div>\\n                    </div>\\n                </div>\\n                <div class=\\\"form-group\\\">\\n                    <div class=\\\"row align-items-center\\\">\\n                        <p class=\\\"col-md-4 py-2 text-md-right\\\">{{ 'common.familyName' | translate }}</p>\\n                        <div class=\\\"col-md-8\\\">\\n                            <input type=\\\"text\\\" class=\\\"form-control\\\" formControlName=\\\"familyName\\\" placeholder=\\\"モーション\\\">\\n                            <div *ngIf=\\\"settingForm.controls.familyName.invalid && settingForm.controls.familyName.touched\\\"\\n                                class=\\\"mt-2\\\">\\n                                <p *ngIf=\\\"settingForm.controls.familyName.errors.required\\\" class=\\\"text-danger\\\">\\n                                    {{ 'form.validation.required' | translate }}</p>\\n                                <p *ngIf=\\\"settingForm.controls.familyName.errors.maxlength\\\" class=\\\"text-danger\\\">\\n                                    {{ 'form.validation.maxlength' | translate: { value: settingForm.controls.familyName.errors.maxlength.requiredLength } }}\\n                                </p>\\n                                <p *ngIf=\\\"settingForm.controls.familyName.errors.pattern\\\" class=\\\"text-danger\\\">\\n                                    {{ 'form.validation.fullKana' | translate }}</p>\\n                            </div>\\n                        </div>\\n                    </div>\\n                </div>\\n                <div class=\\\"form-group\\\">\\n                    <div class=\\\"row align-items-center\\\">\\n                        <p class=\\\"col-md-4 py-2 text-md-right\\\">{{ 'common.givenName' | translate }}</p>\\n                        <div class=\\\"col-md-8\\\">\\n                            <input type=\\\"text\\\" class=\\\"form-control\\\" formControlName=\\\"givenName\\\" placeholder=\\\"ピクチャー\\\">\\n                            <div *ngIf=\\\"settingForm.controls.givenName.invalid && settingForm.controls.givenName.touched\\\"\\n                                class=\\\"mt-2\\\">\\n                                <p *ngIf=\\\"settingForm.controls.givenName.errors.required\\\" class=\\\"text-danger\\\">\\n                                    {{ 'form.validation.required' | translate }}</p>\\n                                <p *ngIf=\\\"settingForm.controls.givenName.errors.maxlength\\\" class=\\\"text-danger\\\">\\n                                    {{ 'form.validation.maxlength' | translate: { value: settingForm.controls.givenName.errors.maxlength.requiredLength } }}\\n                                </p>\\n                                <p *ngIf=\\\"settingForm.controls.givenName.errors.pattern\\\" class=\\\"text-danger\\\">\\n                                    {{ 'form.validation.fullKana' | translate }}\\n                                </p>\\n                            </div>\\n                        </div>\\n                    </div>\\n                </div>\\n                <div class=\\\"form-group\\\">\\n                    <div class=\\\"row align-items-center\\\">\\n                        <p class=\\\"col-md-4 py-2 text-md-right\\\">{{ 'common.email' | translate }}</p>\\n                        <div class=\\\"col-md-8\\\">\\n                            <input type=\\\"email\\\" class=\\\"form-control\\\" formControlName=\\\"email\\\"\\n                                placeholder=\\\"motionpicture@example.jp\\\">\\n                            <div *ngIf=\\\"settingForm.controls.email.invalid && settingForm.controls.email.touched\\\"\\n                                class=\\\"mt-2\\\">\\n                                <p *ngIf=\\\"settingForm.controls.email.errors.required\\\" class=\\\"text-danger\\\">\\n                                    {{ 'form.validation.required' | translate }}</p>\\n                                <p *ngIf=\\\"settingForm.controls.email.errors.maxlength\\\" class=\\\"text-danger\\\">\\n                                    {{ 'form.validation.maxlength' | translate: { value: settingForm.controls.email.errors.maxlength.requiredLength } }}\\n                                </p>\\n                                <p *ngIf=\\\"settingForm.controls.email.errors.email\\\" class=\\\"text-danger\\\">\\n                                    {{ 'form.validation.email' | translate }}</p>\\n                            </div>\\n                        </div>\\n                    </div>\\n                </div>\\n                <div class=\\\"form-group\\\">\\n                    <div class=\\\"row align-items-center\\\">\\n                        <p class=\\\"col-md-4 py-2 text-md-right\\\">{{ 'common.telephone' | translate }}</p>\\n                        <div class=\\\"col-md-8\\\">\\n                            <input type=\\\"tel\\\" class=\\\"form-control\\\" formControlName=\\\"telephone\\\" placeholder=\\\"0362778824\\\">\\n                            <div *ngIf=\\\"settingForm.controls.telephone.invalid && settingForm.controls.telephone.touched\\\"\\n                                class=\\\"mt-2\\\">\\n                                <p *ngIf=\\\"settingForm.controls.telephone.errors.required\\\" class=\\\"text-danger\\\">\\n                                    {{ 'form.validation.required' | translate }}</p>\\n                                <p *ngIf=\\\"settingForm.controls.telephone.errors.minlength\\\" class=\\\"text-danger\\\">\\n                                    {{ 'form.validation.minlength' | translate: { value: settingForm.controls.telephone.errors.minlength.requiredLength } }}\\n                                </p>\\n                                <p *ngIf=\\\"settingForm.controls.telephone.errors.maxlength\\\" class=\\\"text-danger\\\">\\n                                    {{ 'form.validation.minlength' | translate: { value: settingForm.controls.telephone.errors.maxlength.requiredLength } }}\\n                                </p>\\n                                <p *ngIf=\\\"settingForm.controls.telephone.errors.telephone\\\" class=\\\"text-danger\\\">\\n                                    {{ 'form.validation.telephone' | translate }}</p>\\n                            </div>\\n                        </div>\\n                    </div>\\n                </div>\\n                <div *ngIf=\\\"settingForm.controls.age\\\" class=\\\"form-group\\\">\\n                    <div class=\\\"row align-items-center\\\">\\n                        <p class=\\\"col-md-4 py-2 text-md-right\\\">{{ 'common.age' | translate }}</p>\\n                        <div class=\\\"col-md-8\\\">\\n                            <input type=\\\"tel\\\" class=\\\"form-control\\\" formControlName=\\\"age\\\" placeholder=\\\"\\\">\\n                            <div *ngIf=\\\"settingForm.controls.age.invalid && settingForm.controls.age.touched\\\"\\n                                class=\\\"mt-2\\\">\\n                                <p *ngIf=\\\"settingForm.controls.age.errors.required\\\" class=\\\"text-danger\\\">\\n                                    {{ 'form.validation.required' | translate }}</p>\\n                                <p *ngIf=\\\"settingForm.controls.age.errors.minlength\\\" class=\\\"text-danger\\\">\\n                                    {{ 'form.validation.minlength' | translate: { value: settingForm.controls.age.errors.minlength.requiredLength } }}\\n                                </p>\\n                                <p *ngIf=\\\"settingForm.controls.age.errors.maxlength\\\" class=\\\"text-danger\\\">\\n                                    {{ 'form.validation.minlength' | translate: { value: settingForm.controls.age.errors.maxlength.requiredLength } }}\\n                                </p>\\n                                <p *ngIf=\\\"settingForm.controls.age.errors.pattern\\\" class=\\\"text-danger\\\">\\n                                    {{ 'form.validation.pattern' | translate }}\\n                                </p>\\n                            </div>\\n                        </div>\\n                    </div>\\n                </div>\\n                <div *ngIf=\\\"settingForm.controls.address\\\" class=\\\"form-group\\\">\\n                    <div class=\\\"row align-items-center\\\">\\n                        <p class=\\\"col-md-4 py-2 text-md-right\\\">{{ 'common.address' | translate }}</p>\\n                        <div class=\\\"col-md-8\\\">\\n                            <input type=\\\"tel\\\" class=\\\"form-control\\\" formControlName=\\\"address\\\" placeholder=\\\"\\\">\\n                            <div *ngIf=\\\"settingForm.controls.address.invalid && settingForm.controls.address.touched\\\"\\n                                class=\\\"mt-2\\\">\\n                                <p *ngIf=\\\"settingForm.controls.address.errors.required\\\" class=\\\"text-danger\\\">\\n                                    {{ 'form.validation.required' | translate }}</p>\\n                                <p *ngIf=\\\"settingForm.controls.address.errors.minlength\\\" class=\\\"text-danger\\\">\\n                                    {{ 'form.validation.minlength' | translate: { value: settingForm.controls.age.errors.minlength.requiredLength } }}\\n                                </p>\\n                                <p *ngIf=\\\"settingForm.controls.address.errors.maxlength\\\" class=\\\"text-danger\\\">\\n                                    {{ 'form.validation.minlength' | translate: { value: settingForm.controls.age.errors.maxlength.requiredLength } }}\\n                                </p>\\n                                <p *ngIf=\\\"settingForm.controls.address.errors.pattern\\\" class=\\\"text-danger\\\">\\n                                    {{ 'form.validation.pattern' | translate }}\\n                                </p>\\n                            </div>\\n                        </div>\\n                    </div>\\n                </div>\\n                <div *ngIf=\\\"settingForm.controls.gender\\\" class=\\\"form-group\\\">\\n                    <div class=\\\"row align-items-center\\\">\\n                        <p class=\\\"col-md-4 py-2 text-md-right\\\">{{ 'common.gender.label' | translate }}</p>\\n                        <div class=\\\"col-md-8\\\">\\n                            <select class=\\\"form-control\\\" formControlName=\\\"gender\\\">\\n                                <option value=\\\"other\\\">{{ 'common.gender.other' | translate }}</option>\\n                                <option value=\\\"man\\\">{{ 'common.gender.man' | translate }}</option>\\n                                <option value=\\\"woman\\\">{{ 'common.gender.woman' | translate }}</option>\\n                            </select>\\n                            <div *ngIf=\\\"settingForm.controls.gender.invalid && settingForm.controls.gender.touched\\\"\\n                                class=\\\"mt-2\\\">\\n                                <p *ngIf=\\\"settingForm.controls.gender.errors.required\\\" class=\\\"text-danger\\\">\\n                                    {{ 'form.validation.required' | translate }}</p>\\n                                <p *ngIf=\\\"settingForm.controls.gender.errors.minlength\\\" class=\\\"text-danger\\\">\\n                                    {{ 'form.validation.minlength' | translate: { value: settingForm.controls.age.errors.minlength.requiredLength } }}\\n                                </p>\\n                                <p *ngIf=\\\"settingForm.controls.gender.errors.maxlength\\\" class=\\\"text-danger\\\">\\n                                    {{ 'form.validation.minlength' | translate: { value: settingForm.controls.age.errors.maxlength.requiredLength } }}\\n                                </p>\\n                                <p *ngIf=\\\"settingForm.controls.gender.errors.pattern\\\" class=\\\"text-danger\\\">\\n                                    {{ 'form.validation.pattern' | translate }}\\n                                </p>\\n                            </div>\\n                        </div>\\n                    </div>\\n                </div>\\n                <div class=\\\"form-group\\\">\\n                    <div class=\\\"row align-items-center\\\">\\n                        <p class=\\\"col-md-4 py-2 text-md-right\\\">{{ 'setting.printer' | translate }}</p>\\n                        <div class=\\\"col-md-8\\\">\\n                            <select class=\\\"form-control\\\" formControlName=\\\"printerType\\\" (change)=\\\"changePrinterType()\\\">\\n                                <option value=\\\"\\\">{{ 'setting.unselected' | translate }}</option>\\n                                <option *ngFor=\\\"let printer of printers\\\" [value]=\\\"printer.connectionType\\\">\\n                                    {{ printer.name | translate }}</option>\\n                            </select>\\n                            <button\\n                                *ngIf=\\\"this.settingForm.controls.printerType.value && this.settingForm.controls.printerType.value !== connectionType.None\\\"\\n                                type=\\\"button\\\" class=\\\"btn btn-sm btn-primary py-2 mt-2\\\"\\n                                (click)=\\\"print()\\\">{{ 'setting.testPrinting' | translate }}</button>\\n                        </div>\\n                    </div>\\n                </div>\\n                <div class=\\\"form-group\\\">\\n                    <div class=\\\"row align-items-center\\\">\\n                        <p class=\\\"col-md-4 py-2 text-md-right\\\">{{ 'setting.printerIpAddress' | translate }}</p>\\n                        <div class=\\\"col-md-8\\\">\\n                            <input type=\\\"text\\\" class=\\\"form-control\\\" formControlName=\\\"printerIpAddress\\\"\\n                                placeholder=\\\"0.0.0.0\\\">\\n                            <div *ngIf=\\\"settingForm.controls.printerIpAddress.invalid && settingForm.controls.printerIpAddress.touched\\\"\\n                                class=\\\"mt-2\\\">\\n                                <p *ngIf=\\\"settingForm.controls.printerIpAddress.errors.required\\\" class=\\\"text-danger\\\">\\n                                    {{ 'form.validation.required' | translate }}</p>\\n                            </div>\\n                            <p class=\\\"text-small mt-2\\\">\\n                                {{ 'setting.printerIpAddressDescription' | translate }}\\n                            </p>\\n                        </div>\\n                    </div>\\n                </div>\\n                \\n\\n            </div>\\n        </div>\\n\\n        <div class=\\\"buttons mx-auto text-center\\\">\\n            <button type=\\\"submit\\\" [disabled]=\\\"isLoading | async\\\" class=\\\"btn btn-primary btn-block py-3 mb-3\\\"\\n                (click)=\\\"onSubmit()\\\">{{ 'setting.next' | translate }}</button>\\n            <button type=\\\"button\\\" class=\\\"btn btn-link\\\"\\n                [routerLink]=\\\"environment.BASE_URL\\\">{{ 'setting.prev' | translate }}</button>\\n        </div>\\n    </form>\\n</div>\"","export default \"\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsImZpbGUiOiJzcmMvY2xpZW50L2FwcC9tb2R1bGVzL3NldHRpbmcvY29tcG9uZW50cy9wYWdlcy9zZXR0aW5nL3NldHRpbmcuY29tcG9uZW50LnNjc3MifQ== */\"","import { Component, OnInit } from '@angular/core';\nimport { AbstractControl, FormBuilder, FormControl, FormGroup, ValidationErrors, ValidatorFn, Validators } from '@angular/forms';\nimport { Router } from '@angular/router';\nimport { select, Store } from '@ngrx/store';\nimport { TranslateService } from '@ngx-translate/core';\nimport * as libphonenumber from 'libphonenumber-js';\nimport { Observable } from 'rxjs';\nimport { getEnvironment } from '../../../../../../environments/environment';\nimport { connectionType, printers, ViewType } from '../../../../../models';\nimport { MasterService, OrderService, UserService, UtilService } from '../../../../../services';\nimport * as reducers from '../../../../../store/reducers';\nimport { LibphonenumberFormatPipe } from '../../../../shared/pipes/libphonenumber-format.pipe';\n\n@Component({\n    selector: 'app-setting',\n    templateUrl: './setting.component.html',\n    styleUrls: ['./setting.component.scss']\n})\nexport class SettingComponent implements OnInit {\n    public settingForm: FormGroup;\n    public user: Observable<reducers.IUserState>;\n    public master: Observable<reducers.IMasterState>;\n    public error: Observable<string | null>;\n    public isLoading: Observable<boolean>;\n    public posList: { id: string; name: string; typeOf: string; }[];\n    public printers: typeof printers = printers;\n    public connectionType: typeof connectionType = connectionType;\n    public viewType: typeof ViewType = ViewType;\n    public environment = getEnvironment();\n\n    constructor(\n        private formBuilder: FormBuilder,\n        private store: Store<reducers.IState>,\n        private utilService: UtilService,\n        private userService: UserService,\n        private masterService: MasterService,\n        private orderService: OrderService,\n        private translate: TranslateService,\n        private router: Router\n    ) { }\n\n    /**\n     * 初期化\n     */\n    public async ngOnInit() {\n        this.user = this.store.pipe(select(reducers.getUser));\n        this.master = this.store.pipe(select(reducers.getMaster));\n        this.error = this.store.pipe(select(reducers.getError));\n        this.isLoading = this.store.pipe(select(reducers.getLoading));\n        this.posList = [];\n        try {\n            await this.masterService.getSellers();\n            await this.masterService.getTheaters();\n            const userData = await this.userService.getData();\n            const masterData = await this.masterService.getData();\n            if (userData.seller !== undefined\n                && userData.pos !== undefined\n                && userData.customerContact !== undefined\n                && userData.printer !== undefined\n                && userData.theater === undefined) {\n                // 互換性担保\n                const seller = userData.seller;\n                const findResult = masterData.theaters.find(t => {\n                    return (seller.location !== undefined\n                        && t.branchCode === seller.location.branchCode);\n                });\n                const theater = (findResult === undefined) ? masterData.theaters[0] : findResult;\n                this.userService.updateAll({\n                    seller: userData.seller,\n                    pos: userData.pos,\n                    theater: theater,\n                    customerContact: userData.customerContact,\n                    printer: userData.printer\n                });\n            }\n            await this.createSettlingForm();\n        } catch (error) {\n            console.error(error);\n            this.router.navigate(['/error']);\n        }\n    }\n\n    /**\n     * フォーム作成\n     */\n    private async createSettlingForm() {\n        const profile = this.environment.PROFILE;\n        this.settingForm = this.formBuilder.group({\n            theaterBranchCode: ['', [\n                Validators.required\n            ]],\n            posId: ['', [\n                Validators.required\n            ]],\n            printerType: [''],\n            printerIpAddress: ['']\n        });\n        profile.forEach(p => {\n            const validators: ValidatorFn[] = [];\n            if (p.required !== undefined && p.required) {\n                validators.push(Validators.required);\n            }\n            if (p.maxLength !== undefined) {\n                validators.push(Validators.maxLength(p.maxLength));\n            }\n            if (p.minLength !== undefined) {\n                validators.push(Validators.minLength(p.minLength));\n            }\n            if (p.pattern !== undefined) {\n                validators.push(Validators.pattern(p.pattern));\n            }\n            if (p.key === 'email') {\n                validators.push(Validators.email);\n            }\n            if (p.key === 'telephone') {\n                validators.push((control: AbstractControl): ValidationErrors | null => {\n                    const field = control.root.get('telephone');\n                    if (field !== null) {\n                        if (field.value === '') {\n                            return null;\n                        }\n                        const parsedNumber = (new RegExp(/^\\+/).test(field.value))\n                            ? libphonenumber.parse(field.value)\n                            : libphonenumber.parse(field.value, 'JP');\n                        if (parsedNumber.phone === undefined) {\n                            return { telephone: true };\n                        }\n                        const isValid = libphonenumber.isValidNumber(parsedNumber);\n                        if (!isValid) {\n                            return { telephone: true };\n                        }\n                    }\n\n                    return null;\n                });\n            }\n            this.settingForm.addControl(p.key, new FormControl(p.value, validators));\n        });\n        const user = await this.userService.getData();\n        if (user.theater !== undefined) {\n            this.settingForm.controls.theaterBranchCode.setValue(user.theater.branchCode);\n        }\n        if (user.pos !== undefined) {\n            this.changePosList();\n            this.settingForm.controls.posId.setValue(user.pos.id);\n        }\n        if (user.customerContact !== undefined\n            && user.customerContact.familyName !== undefined\n            && user.customerContact.givenName !== undefined\n            && user.customerContact.email !== undefined\n            && user.customerContact.telephone !== undefined) {\n            this.settingForm.controls.familyName.setValue(user.customerContact.familyName);\n            this.settingForm.controls.givenName.setValue(user.customerContact.givenName);\n            this.settingForm.controls.email.setValue(user.customerContact.email);\n            this.settingForm.controls.telephone.setValue(new LibphonenumberFormatPipe().transform(user.customerContact.telephone));\n        }\n        const customerContact = user.customerContact;\n        if (customerContact !== undefined) {\n            Object.keys(customerContact).forEach(key => {\n                const value = (<any>customerContact)[key];\n                if (value === undefined) {\n                    return;\n                }\n                if (key === 'telephone') {\n                    this.settingForm.controls.telephone\n                        .setValue(new LibphonenumberFormatPipe().transform(value));\n                    return;\n                }\n                this.settingForm.controls[key].setValue(value);\n            });\n        }\n        if (user.customerContact !== undefined && user.customerContact.telephone !== undefined) {\n            this.settingForm.controls.telephone.setValue(new LibphonenumberFormatPipe().transform(user.customerContact.telephone));\n        }\n        if (user.printer !== undefined) {\n            this.settingForm.controls.printerType.setValue(user.printer.connectionType);\n            this.settingForm.controls.printerIpAddress.setValue(user.printer.ipAddress);\n        }\n        console.log(this.settingForm);\n    }\n\n    /**\n     * POS変更\n     */\n    public changePosList() {\n        this.settingForm.controls.posId.setValue('');\n        const theaterBranchCode = this.settingForm.controls.theaterBranchCode.value;\n        if (theaterBranchCode === '') {\n            this.posList = [];\n            return;\n        }\n        this.master.subscribe((master) => {\n            const findResult =\n                master.sellers.find(s => (s.location !== undefined && s.location.branchCode === theaterBranchCode));\n            if (findResult === undefined) {\n                this.posList = [];\n                return;\n            }\n            this.posList = (findResult.hasPOS === undefined) ? [] : findResult.hasPOS;\n        }).unsubscribe();\n    }\n\n\n    /**\n     * 設定変更\n     */\n    public async onSubmit() {\n        Object.keys(this.settingForm.controls).forEach((key) => {\n            this.settingForm.controls[key].markAsTouched();\n        });\n        if (this.settingForm.invalid) {\n            this.utilService.openAlert({\n                title: this.translate.instant('common.error'),\n                body: this.translate.instant('setting.alert.validation')\n            });\n            return;\n        }\n        try {\n            const masterData = await this.masterService.getData();\n            const theaterBranchCode = this.settingForm.controls.theaterBranchCode.value;\n            const posId = this.settingForm.controls.posId.value;\n            const seller = masterData.sellers.find(s => (s.location !== undefined && s.location.branchCode === theaterBranchCode));\n            if (seller === undefined || seller.hasPOS === undefined) {\n                throw new Error('seller not found').message;\n            }\n            const pos = seller.hasPOS.find(p => p.id === posId);\n            if (pos === undefined) {\n                throw new Error('pos not found').message;\n            }\n            const theater = masterData.theaters.find(t => (t.branchCode === theaterBranchCode));\n            if (theater === undefined) {\n                throw new Error('theater not found').message;\n            }\n            this.userService.updateAll({\n                seller,\n                pos,\n                theater,\n                customerContact: {\n                    familyName: (this.settingForm.controls.familyName === undefined)\n                        ? undefined : this.settingForm.controls.familyName.value,\n                    givenName: (this.settingForm.controls.givenName === undefined)\n                        ? undefined : this.settingForm.controls.givenName.value,\n                    email: (this.settingForm.controls.email === undefined)\n                        ? undefined : this.settingForm.controls.email.value,\n                    telephone: (this.settingForm.controls.telephone === undefined)\n                        ? undefined : this.settingForm.controls.telephone.value,\n                    age: (this.settingForm.controls.age === undefined)\n                        ? undefined : this.settingForm.controls.age.value,\n                    address: (this.settingForm.controls.address === undefined)\n                        ? undefined : this.settingForm.controls.address.value,\n                    gender: (this.settingForm.controls.gender === undefined)\n                        ? undefined : this.settingForm.controls.gender.value\n                },\n                printer: {\n                    ipAddress: this.settingForm.controls.printerIpAddress.value,\n                    connectionType: this.settingForm.controls.printerType.value\n                }\n            });\n            this.utilService.openAlert({\n                title: this.translate.instant('common.complete'),\n                body: this.translate.instant('setting.alert.success')\n            });\n        } catch (error) {\n            console.error(error);\n        }\n    }\n\n    /**\n     * 印刷\n     */\n    public async print() {\n        const printer = {\n            connectionType: this.settingForm.controls.printerType.value,\n            ipAddress: this.settingForm.controls.printerIpAddress.value\n        };\n        try {\n            await this.orderService.print({ orders: [], printer });\n        } catch (error) {\n            console.error(error);\n            this.utilService.openAlert({\n                title: this.translate.instant('common.error'),\n                body: `\n                <p class=\"mb-4\">${this.translate.instant('setting.alert.print')}</p>\n                    <div class=\"p-3 bg-light-gray select-text\">\n                    <code>${error}</code>\n                </div>`\n            });\n        }\n    }\n\n    /**\n     * プリンター変更\n     */\n    public changePrinterType() {\n        if (this.settingForm.controls.printerType.value === connectionType.StarBluetooth) {\n            this.settingForm.controls.printerIpAddress.setValue(this.translate.instant('setting.starBluetoothAddress'));\n        }\n    }\n\n}\n","import { NgModule } from '@angular/core';\nimport { RouterModule, Routes } from '@angular/router';\nimport { BaseComponent } from '../shared/components/pages/base/base.component';\nimport { SettingComponent } from './components/pages/setting/setting.component';\n\n\nconst routes: Routes = [{\n  path: '',\n  component: BaseComponent,\n  children: [\n    { path: '', component: SettingComponent }\n  ]\n}];\n\n@NgModule({\n  imports: [RouterModule.forChild(routes)],\n  exports: [RouterModule]\n})\nexport class SettingRoutingModule { }\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { SharedModule } from '../shared/shared.module';\nimport { SettingComponent } from './components/pages/setting/setting.component';\nimport { SettingRoutingModule } from './setting-routing.module';\n\n\n@NgModule({\n  declarations: [\n    SettingComponent\n  ],\n  imports: [\n    CommonModule,\n    SettingRoutingModule,\n    SharedModule,\n  ]\n})\nexport class SettingModule { }\n"],"sourceRoot":"webpack:///"}