{"version":3,"sources":["app/modules/setting/components/pages/setting/setting.component.html","app/modules/setting/components/pages/setting/setting.component.scss","app/modules/setting/components/pages/setting/setting.component.ts","app/modules/setting/setting-routing.module.ts","app/modules/setting/setting.module.ts"],"names":[],"mappings":"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","sourcesContent":["export default \"<div class=\\\"contents-width mx-auto px-3 py-5\\\">\\n    <form *ngIf=\\\"settingForm\\\" [formGroup]=\\\"settingForm\\\">\\n        <div class=\\\"mb-4\\\">\\n            <h2 class=\\\"text-large mb-4 text-center font-weight-bold\\\">{{ 'setting.title' | translate }}</h2>\\n            <p class=\\\"mb-4 text-md-center\\\" [innerHTML]=\\\"'setting.read' | translate\\\"></p>\\n            <div class=\\\"p-3 bg-white\\\">\\n\\n                <div class=\\\"form-group\\\">\\n                    <div class=\\\"row align-items-center\\\">\\n                        <p class=\\\"col-md-4 py-2 text-md-right\\\">{{ 'common.theater' | translate }}</p>\\n                        <div class=\\\"col-md-8\\\">\\n                            <select class=\\\"form-control\\\" formControlName=\\\"theaterBranchCode\\\" (change)=\\\"changePosList()\\\">\\n                                <option value=\\\"\\\">{{ 'setting.unselected' | translate }}</option>\\n                                <option *ngFor=\\\"let theater of (master | async).theaters\\\"\\n                                    [value]=\\\"theater.branchCode\\\">{{ theater.name | changeLanguage }}</option>\\n                            </select>\\n                            <div *ngIf=\\\"settingForm.controls.theaterBranchCode.invalid && settingForm.controls.theaterBranchCode.touched\\\"\\n                                class=\\\"mt-2\\\">\\n                                <p *ngIf=\\\"settingForm.controls.theaterBranchCode.errors.required\\\" class=\\\"text-danger\\\">\\n                                    {{ 'form.validation.unselected' | translate }}</p>\\n                            </div>\\n                        </div>\\n                    </div>\\n                </div>\\n                <div class=\\\"form-group\\\">\\n                    <div class=\\\"row align-items-center\\\">\\n                        <p class=\\\"col-md-4 py-2 text-md-right\\\">{{ 'setting.pos' | translate }}</p>\\n                        <div class=\\\"col-md-8\\\">\\n                            <select class=\\\"form-control\\\" formControlName=\\\"posId\\\">\\n                                <option value=\\\"\\\">{{ 'setting.unselected' | translate }}</option>\\n                                <option *ngFor=\\\"let pos of posList\\\" [value]=\\\"pos.id\\\">{{ pos.name }}</option>\\n                            </select>\\n                            <div *ngIf=\\\"settingForm.controls.posId.invalid && settingForm.controls.posId.touched\\\"\\n                                class=\\\"mt-2\\\">\\n                                <p *ngIf=\\\"settingForm.controls.posId.errors.required\\\" class=\\\"text-danger\\\">\\n                                    {{ 'form.validation.unselected' | translate }}</p>\\n                            </div>\\n                        </div>\\n                    </div>\\n                </div>\\n                <div class=\\\"form-group\\\">\\n                    <div class=\\\"row align-items-center\\\">\\n                        <p class=\\\"col-md-4 py-2 text-md-right\\\">{{ 'common.familyName' | translate }}</p>\\n                        <div class=\\\"col-md-8\\\">\\n                            <input type=\\\"text\\\" class=\\\"form-control\\\" formControlName=\\\"familyName\\\" placeholder=\\\"モーション\\\">\\n                            <div *ngIf=\\\"settingForm.controls.familyName.invalid && settingForm.controls.familyName.touched\\\"\\n                                class=\\\"mt-2\\\">\\n                                <p *ngIf=\\\"settingForm.controls.familyName.errors.required\\\" class=\\\"text-danger\\\">\\n                                    {{ 'form.validation.required' | translate }}</p>\\n                                <p *ngIf=\\\"settingForm.controls.familyName.errors.maxlength\\\" class=\\\"text-danger\\\">\\n                                    {{ 'form.validation.maxlength' | translate: { value: settingForm.controls.familyName.errors.maxlength.requiredLength } }}\\n                                </p>\\n                                <p *ngIf=\\\"settingForm.controls.familyName.errors.pattern\\\" class=\\\"text-danger\\\">\\n                                    {{ 'form.validation.fullKana' | translate }}</p>\\n                            </div>\\n                        </div>\\n                    </div>\\n                </div>\\n                <div class=\\\"form-group\\\">\\n                    <div class=\\\"row align-items-center\\\">\\n                        <p class=\\\"col-md-4 py-2 text-md-right\\\">{{ 'common.givenName' | translate }}</p>\\n                        <div class=\\\"col-md-8\\\">\\n                            <input type=\\\"text\\\" class=\\\"form-control\\\" formControlName=\\\"givenName\\\" placeholder=\\\"ピクチャー\\\">\\n                            <div *ngIf=\\\"settingForm.controls.givenName.invalid && settingForm.controls.givenName.touched\\\"\\n                                class=\\\"mt-2\\\">\\n                                <p *ngIf=\\\"settingForm.controls.givenName.errors.required\\\" class=\\\"text-danger\\\">\\n                                    {{ 'form.validation.required' | translate }}</p>\\n                                <p *ngIf=\\\"settingForm.controls.givenName.errors.maxlength\\\" class=\\\"text-danger\\\">\\n                                    {{ 'form.validation.maxlength' | translate: { value: settingForm.controls.givenName.errors.maxlength.requiredLength } }}\\n                                </p>\\n                                <p *ngIf=\\\"settingForm.controls.givenName.errors.pattern\\\" class=\\\"text-danger\\\">\\n                                    {{ 'form.validation.fullKana' | translate }}\\n                                </p>\\n                            </div>\\n                        </div>\\n                    </div>\\n                </div>\\n                <div class=\\\"form-group\\\">\\n                    <div class=\\\"row align-items-center\\\">\\n                        <p class=\\\"col-md-4 py-2 text-md-right\\\">{{ 'common.email' | translate }}</p>\\n                        <div class=\\\"col-md-8\\\">\\n                            <input type=\\\"email\\\" class=\\\"form-control\\\" formControlName=\\\"email\\\"\\n                                placeholder=\\\"motionpicture@example.jp\\\">\\n                            <div *ngIf=\\\"settingForm.controls.email.invalid && settingForm.controls.email.touched\\\"\\n                                class=\\\"mt-2\\\">\\n                                <p *ngIf=\\\"settingForm.controls.email.errors.required\\\" class=\\\"text-danger\\\">\\n                                    {{ 'form.validation.required' | translate }}</p>\\n                                <p *ngIf=\\\"settingForm.controls.email.errors.maxlength\\\" class=\\\"text-danger\\\">\\n                                    {{ 'form.validation.maxlength' | translate: { value: settingForm.controls.email.errors.maxlength.requiredLength } }}\\n                                </p>\\n                                <p *ngIf=\\\"settingForm.controls.email.errors.email\\\" class=\\\"text-danger\\\">\\n                                    {{ 'form.validation.email' | translate }}</p>\\n                            </div>\\n                        </div>\\n                    </div>\\n                </div>\\n                <div class=\\\"form-group\\\">\\n                    <div class=\\\"row align-items-center\\\">\\n                        <p class=\\\"col-md-4 py-2 text-md-right\\\">{{ 'common.telephone' | translate }}</p>\\n                        <div class=\\\"col-md-8\\\">\\n                            <input type=\\\"tel\\\" class=\\\"form-control\\\" formControlName=\\\"telephone\\\" placeholder=\\\"0362778824\\\">\\n                            <div *ngIf=\\\"settingForm.controls.telephone.invalid && settingForm.controls.telephone.touched\\\"\\n                                class=\\\"mt-2\\\">\\n                                <p *ngIf=\\\"settingForm.controls.telephone.errors.required\\\" class=\\\"text-danger\\\">\\n                                    {{ 'form.validation.required' | translate }}</p>\\n                                <p *ngIf=\\\"settingForm.controls.telephone.errors.minlength\\\" class=\\\"text-danger\\\">\\n                                    {{ 'form.validation.minlength' | translate: { value: settingForm.controls.telephone.errors.minlength.requiredLength } }}\\n                                </p>\\n                                <p *ngIf=\\\"settingForm.controls.telephone.errors.maxlength\\\" class=\\\"text-danger\\\">\\n                                    {{ 'form.validation.minlength' | translate: { value: settingForm.controls.telephone.errors.maxlength.requiredLength } }}\\n                                </p>\\n                                <p *ngIf=\\\"settingForm.controls.telephone.errors.telephone\\\" class=\\\"text-danger\\\">\\n                                    {{ 'form.validation.telephone' | translate }}</p>\\n                            </div>\\n                        </div>\\n                    </div>\\n                </div>\\n                <div class=\\\"form-group\\\">\\n                    <div class=\\\"row align-items-center\\\">\\n                        <p class=\\\"col-md-4 py-2 text-md-right\\\">{{ 'setting.printer' | translate }}</p>\\n                        <div class=\\\"col-md-8\\\">\\n                            <select class=\\\"form-control\\\" formControlName=\\\"printerType\\\" (change)=\\\"changePrinterType()\\\">\\n                                <option value=\\\"\\\">{{ 'setting.unselected' | translate }}</option>\\n                                <option *ngFor=\\\"let printer of printers\\\" [value]=\\\"printer.connectionType\\\">\\n                                    {{ printer.name | translate }}</option>\\n                            </select>\\n                            <button\\n                                *ngIf=\\\"this.settingForm.controls.printerType.value && this.settingForm.controls.printerType.value !== connectionType.None\\\"\\n                                type=\\\"button\\\" class=\\\"btn btn-sm btn-primary py-2 mt-2\\\"\\n                                (click)=\\\"print()\\\">{{ 'setting.testPrinting' | translate }}</button>\\n                        </div>\\n                    </div>\\n                </div>\\n                <div class=\\\"form-group\\\">\\n                    <div class=\\\"row align-items-center\\\">\\n                        <p class=\\\"col-md-4 py-2 text-md-right\\\">{{ 'setting.printerIpAddress' | translate }}</p>\\n                        <div class=\\\"col-md-8\\\">\\n                            <input type=\\\"text\\\" class=\\\"form-control\\\" formControlName=\\\"printerIpAddress\\\"\\n                                placeholder=\\\"0.0.0.0\\\">\\n                            <div *ngIf=\\\"settingForm.controls.printerIpAddress.invalid && settingForm.controls.printerIpAddress.touched\\\"\\n                                class=\\\"mt-2\\\">\\n                                <p *ngIf=\\\"settingForm.controls.printerIpAddress.errors.required\\\" class=\\\"text-danger\\\">\\n                                    {{ 'form.validation.required' | translate }}</p>\\n                            </div>\\n                            <p class=\\\"text-small mt-2\\\">\\n                                {{ 'setting.printerIpAddressDescription' | translate }}\\n                            </p>\\n                        </div>\\n                    </div>\\n                </div>\\n                \\n\\n            </div>\\n        </div>\\n\\n        <div class=\\\"buttons mx-auto text-center\\\">\\n            <button type=\\\"submit\\\" [disabled]=\\\"isLoading | async\\\" class=\\\"btn btn-primary btn-block py-3 mb-3\\\"\\n                (click)=\\\"onSubmit()\\\">{{ 'setting.next' | translate }}</button>\\n            <button type=\\\"button\\\" class=\\\"btn btn-link\\\"\\n                [routerLink]=\\\"environment.BASE_URL\\\">{{ 'setting.prev' | translate }}</button>\\n        </div>\\n    </form>\\n</div>\"","export default \"\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsImZpbGUiOiJzcmMvY2xpZW50L2FwcC9tb2R1bGVzL3NldHRpbmcvY29tcG9uZW50cy9wYWdlcy9zZXR0aW5nL3NldHRpbmcuY29tcG9uZW50LnNjc3MifQ== */\"","import { Component, OnInit } from '@angular/core';\nimport { AbstractControl, FormBuilder, FormGroup, ValidationErrors, Validators } from '@angular/forms';\nimport { Router } from '@angular/router';\nimport { select, Store } from '@ngrx/store';\nimport { TranslateService } from '@ngx-translate/core';\nimport * as libphonenumber from 'libphonenumber-js';\nimport { Observable } from 'rxjs';\nimport { getEnvironment } from '../../../../../../environments/environment';\nimport { connectionType, printers, ViewType } from '../../../../../models';\nimport { MasterService, OrderService, UserService, UtilService } from '../../../../../services';\nimport * as reducers from '../../../../../store/reducers';\nimport { LibphonenumberFormatPipe } from '../../../../shared/pipes/libphonenumber-format.pipe';\n\n@Component({\n    selector: 'app-setting',\n    templateUrl: './setting.component.html',\n    styleUrls: ['./setting.component.scss']\n})\nexport class SettingComponent implements OnInit {\n    public settingForm: FormGroup;\n    public user: Observable<reducers.IUserState>;\n    public master: Observable<reducers.IMasterState>;\n    public error: Observable<string | null>;\n    public isLoading: Observable<boolean>;\n    public posList: { id: string; name: string; typeOf: string; }[];\n    public printers: typeof printers = printers;\n    public connectionType: typeof connectionType = connectionType;\n    public viewType: typeof ViewType = ViewType;\n    public environment = getEnvironment();\n\n    constructor(\n        private formBuilder: FormBuilder,\n        private store: Store<reducers.IState>,\n        private utilService: UtilService,\n        private userService: UserService,\n        private masterService: MasterService,\n        private orderService: OrderService,\n        private translate: TranslateService,\n        private router: Router\n    ) { }\n\n    /**\n     * 初期化\n     */\n    public async ngOnInit() {\n        this.user = this.store.pipe(select(reducers.getUser));\n        this.master = this.store.pipe(select(reducers.getMaster));\n        this.error = this.store.pipe(select(reducers.getError));\n        this.isLoading = this.store.pipe(select(reducers.getLoading));\n        this.posList = [];\n        try {\n            await this.masterService.getSellers();\n            await this.masterService.getTheaters();\n            const userData = await this.userService.getData();\n            const masterData = await this.masterService.getData();\n            if (userData.seller !== undefined\n                && userData.pos !== undefined\n                && userData.customerContact !== undefined\n                && userData.printer !== undefined\n                && userData.theater === undefined) {\n                // 互換性担保\n                const seller = userData.seller;\n                const findResult = masterData.theaters.find(t => {\n                    return (seller.location !== undefined\n                        && t.branchCode === seller.location.branchCode);\n                });\n                const theater = (findResult === undefined) ? masterData.theaters[0] : findResult;\n                this.userService.updateAll({\n                    seller: userData.seller,\n                    pos: userData.pos,\n                    theater: theater,\n                    customerContact: userData.customerContact,\n                    printer: userData.printer\n                });\n            }\n            await this.createSettlingForm();\n        } catch (error) {\n            console.error(error);\n            this.router.navigate(['/error']);\n        }\n    }\n\n    /**\n     * フォーム作成\n     */\n    private async createSettlingForm() {\n        const NAME_MAX_LENGTH = 12;\n        const MAIL_MAX_LENGTH = 50;\n        const TEL_MAX_LENGTH = 15;\n        const TEL_MIN_LENGTH = 9;\n\n        this.settingForm = this.formBuilder.group({\n            theaterBranchCode: ['', [\n                Validators.required\n            ]],\n            posId: ['', [\n                Validators.required\n            ]],\n            familyName: ['', [\n                Validators.required,\n                Validators.maxLength(NAME_MAX_LENGTH),\n                Validators.pattern(/^[ァ-ヶー]+$/)\n            ]],\n            givenName: ['', [\n                Validators.required,\n                Validators.maxLength(NAME_MAX_LENGTH),\n                Validators.pattern(/^[ァ-ヶー]+$/)\n            ]],\n            email: ['', [\n                Validators.required,\n                Validators.maxLength(MAIL_MAX_LENGTH),\n                Validators.email\n            ]],\n            telephone: ['', [\n                Validators.required,\n                Validators.maxLength(TEL_MAX_LENGTH),\n                Validators.minLength(TEL_MIN_LENGTH),\n                (control: AbstractControl): ValidationErrors | null => {\n                    const field = control.root.get('telephone');\n                    if (field !== null) {\n                        if (field.value === '') {\n                            return null;\n                        }\n                        const parsedNumber = (new RegExp(/^\\+/).test(field.value))\n                            ? libphonenumber.parse(field.value)\n                            : libphonenumber.parse(field.value, 'JP');\n                        if (parsedNumber.phone === undefined) {\n                            return { telephone: true };\n                        }\n                        const isValid = libphonenumber.isValidNumber(parsedNumber);\n                        if (!isValid) {\n                            return { telephone: true };\n                        }\n                    }\n\n                    return null;\n                }\n            ]],\n            printerType: [''],\n            printerIpAddress: ['']\n        });\n        const user = await this.userService.getData();\n        if (user.theater !== undefined) {\n            this.settingForm.controls.theaterBranchCode.setValue(user.theater.branchCode);\n        }\n        if (user.pos !== undefined) {\n            this.changePosList();\n            this.settingForm.controls.posId.setValue(user.pos.id);\n        }\n        if (user.customerContact !== undefined\n            && user.customerContact.familyName !== undefined\n            && user.customerContact.givenName !== undefined\n            && user.customerContact.email !== undefined\n            && user.customerContact.telephone !== undefined) {\n            this.settingForm.controls.familyName.setValue(user.customerContact.familyName);\n            this.settingForm.controls.givenName.setValue(user.customerContact.givenName);\n            this.settingForm.controls.email.setValue(user.customerContact.email);\n            this.settingForm.controls.telephone.setValue(new LibphonenumberFormatPipe().transform(user.customerContact.telephone));\n        }\n        if (user.printer !== undefined) {\n            this.settingForm.controls.printerType.setValue(user.printer.connectionType);\n            this.settingForm.controls.printerIpAddress.setValue(user.printer.ipAddress);\n        }\n    }\n\n    /**\n     * POS変更\n     */\n    public changePosList() {\n        this.settingForm.controls.posId.setValue('');\n        const theaterBranchCode = this.settingForm.controls.theaterBranchCode.value;\n        if (theaterBranchCode === '') {\n            this.posList = [];\n            return;\n        }\n        this.master.subscribe((master) => {\n            const findResult =\n                master.sellers.find(s => (s.location !== undefined && s.location.branchCode === theaterBranchCode));\n            if (findResult === undefined) {\n                this.posList = [];\n                return;\n            }\n            this.posList = (findResult.hasPOS === undefined) ? [] : findResult.hasPOS;\n        }).unsubscribe();\n    }\n\n\n    /**\n     * 設定変更\n     */\n    public async onSubmit() {\n        Object.keys(this.settingForm.controls).forEach((key) => {\n            this.settingForm.controls[key].markAsTouched();\n        });\n        if (this.settingForm.invalid) {\n            this.utilService.openAlert({\n                title: this.translate.instant('common.error'),\n                body: this.translate.instant('setting.alert.validation')\n            });\n            return;\n        }\n        try {\n            const masterData = await this.masterService.getData();\n            const theaterBranchCode = this.settingForm.controls.theaterBranchCode.value;\n            const posId = this.settingForm.controls.posId.value;\n            const seller = masterData.sellers.find(s => (s.location !== undefined && s.location.branchCode === theaterBranchCode));\n            if (seller === undefined || seller.hasPOS === undefined) {\n                throw new Error('seller not found').message;\n            }\n            const pos = seller.hasPOS.find(p => p.id === posId);\n            if (pos === undefined) {\n                throw new Error('pos not found').message;\n            }\n            const theater = masterData.theaters.find(t => (t.branchCode === theaterBranchCode));\n            if (theater === undefined) {\n                throw new Error('theater not found').message;\n            }\n            this.userService.updateAll({\n                seller,\n                pos,\n                theater,\n                customerContact: {\n                    familyName: this.settingForm.controls.familyName.value,\n                    givenName: this.settingForm.controls.givenName.value,\n                    email: this.settingForm.controls.email.value,\n                    telephone: this.settingForm.controls.telephone.value\n                },\n                printer: {\n                    ipAddress: this.settingForm.controls.printerIpAddress.value,\n                    connectionType: this.settingForm.controls.printerType.value\n                }\n            });\n            this.utilService.openAlert({\n                title: this.translate.instant('common.complete'),\n                body: this.translate.instant('setting.alert.success')\n            });\n        } catch (error) {\n            console.error(error);\n        }\n    }\n\n    /**\n     * 印刷\n     */\n    public async print() {\n        const printer = {\n            connectionType: this.settingForm.controls.printerType.value,\n            ipAddress: this.settingForm.controls.printerIpAddress.value\n        };\n        try {\n            await this.orderService.print({ orders: [], printer });\n        } catch (error) {\n            console.error(error);\n            this.utilService.openAlert({\n                title: this.translate.instant('common.error'),\n                body: `\n                <p class=\"mb-4\">${this.translate.instant('setting.alert.print')}</p>\n                    <div class=\"p-3 bg-light-gray select-text\">\n                    <code>${error}</code>\n                </div>`\n            });\n        }\n    }\n\n    /**\n     * プリンター変更\n     */\n    public changePrinterType() {\n        if (this.settingForm.controls.printerType.value === connectionType.StarBluetooth) {\n            this.settingForm.controls.printerIpAddress.setValue(this.translate.instant('setting.starBluetoothAddress'));\n        }\n    }\n\n}\n","import { NgModule } from '@angular/core';\nimport { RouterModule, Routes } from '@angular/router';\nimport { BaseComponent } from '../shared/components/pages/base/base.component';\nimport { SettingComponent } from './components/pages/setting/setting.component';\n\n\nconst routes: Routes = [{\n  path: '',\n  component: BaseComponent,\n  children: [\n    { path: '', component: SettingComponent }\n  ]\n}];\n\n@NgModule({\n  imports: [RouterModule.forChild(routes)],\n  exports: [RouterModule]\n})\nexport class SettingRoutingModule { }\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { SharedModule } from '../shared/shared.module';\nimport { SettingComponent } from './components/pages/setting/setting.component';\nimport { SettingRoutingModule } from './setting-routing.module';\n\n\n@NgModule({\n  declarations: [\n    SettingComponent\n  ],\n  imports: [\n    CommonModule,\n    SettingRoutingModule,\n    SharedModule,\n  ]\n})\nexport class SettingModule { }\n"],"sourceRoot":"webpack:///","file":"modules-setting-setting-module-es5.js"}