(window.webpackJsonp=window.webpackJsonp||[]).push([[15],{"744H":function(e,t,n){"use strict";n.r(t),t.default='<div class="contents-width mx-auto px-3 py-5">\n    <form *ngIf="settingForm" [formGroup]="settingForm">\n        <div class="mb-4">\n            <h2 class="text-large mb-4 text-center font-weight-bold">{{ \'setting.title\' | translate }}</h2>\n            <p class="mb-4 text-md-center" [innerHTML]="\'setting.read\' | translate"></p>\n            <div class="p-3 bg-white">\n                <div class="form-group">\n                    <div class="row align-items-center">\n                        <p class="col-md-4 py-2 text-md-right">{{ \'common.seller\' | translate }}<span\n                                class="badge badge-danger ml-2">{{ \'common.required\' | translate }}</span></p>\n                        <div class="col-md-8">\n                            <select class="form-control" formControlName="sellerId" (change)="changePosList()">\n                                <option value="">{{ \'setting.unselected\' | translate }}</option>\n                                <option *ngFor="let seller of (master | async).sellers" [value]="seller.id">\n                                    {{ seller.name | changeLanguage }}</option>\n                            </select>\n                            <div *ngIf="settingForm.controls.sellerId.invalid && settingForm.controls.sellerId.touched"\n                                class="mt-2">\n                                <p *ngIf="settingForm.controls.sellerId.errors.required" class="text-danger">\n                                    {{ \'form.validation.unselected\' | translate }}</p>\n                            </div>\n                        </div>\n                    </div>\n                </div>\n                <div class="form-group">\n                    <div class="row align-items-center">\n                        <p class="col-md-4 py-2 text-md-right">{{ \'setting.pos\' | translate }}</p>\n                        <div class="col-md-8">\n                            <select class="form-control" formControlName="posId">\n                                <option value="">{{ \'setting.unselected\' | translate }}</option>\n                                <option *ngFor="let pos of posList" [value]="pos.id">{{ pos.name }}</option>\n                            </select>\n                            <div *ngIf="settingForm.controls.posId.invalid && settingForm.controls.posId.touched"\n                                class="mt-2">\n                                <p *ngIf="settingForm.controls.posId.errors.required" class="text-danger">\n                                    {{ \'form.validation.unselected\' | translate }}</p>\n                            </div>\n                        </div>\n                    </div>\n                </div>\n\n                <div class="form-group">\n                    <div class="row align-items-center">\n                        <p class="col-md-4 py-2 text-md-right">{{ \'common.theater\' | translate }}<span\n                                class="badge badge-danger ml-2">{{ \'common.required\' | translate }}</span></p>\n                        <div class="col-md-8">\n                            <select class="form-control" formControlName="theaterBranchCode">\n                                <option value="">{{ \'setting.unselected\' | translate }}</option>\n                                <option *ngFor="let theater of (master | async).theaters" [value]="theater.branchCode">\n                                    {{ theater.name | changeLanguage }}</option>\n                            </select>\n                            <div *ngIf="settingForm.controls.theaterBranchCode.invalid && settingForm.controls.theaterBranchCode.touched"\n                                class="mt-2">\n                                <p *ngIf="settingForm.controls.theaterBranchCode.errors.required" class="text-danger">\n                                    {{ \'form.validation.unselected\' | translate }}</p>\n                            </div>\n                        </div>\n                    </div>\n                </div>\n\n                <div *ngIf="settingForm.controls.familyName" class="form-group">\n                    <div class="row align-items-center">\n                        <p class="col-md-4 py-2 text-md-right">{{ \'common.familyName\' | translate }}<span\n                                *ngIf="isRequired(\'familyName\')"\n                                class="badge badge-danger ml-2">{{ \'common.required\' | translate }}</span></p>\n                        <div class="col-md-8">\n                            <input type="text" class="form-control" formControlName="familyName" placeholder="\u30e2\u30fc\u30b7\u30e7\u30f3">\n                            <div *ngIf="settingForm.controls.familyName.invalid && settingForm.controls.familyName.touched"\n                                class="mt-2">\n                                <p *ngIf="settingForm.controls.familyName.errors.required" class="text-danger">\n                                    {{ \'form.validation.required\' | translate }}</p>\n                                <p *ngIf="settingForm.controls.familyName.errors.maxlength" class="text-danger">\n                                    {{ \'form.validation.maxlength\' | translate: { value: settingForm.controls.familyName.errors.maxlength.requiredLength } }}\n                                </p>\n                                <p *ngIf="settingForm.controls.familyName.errors.pattern" class="text-danger">\n                                    {{ \'form.validation.fullKana\' | translate }}</p>\n                            </div>\n                        </div>\n                    </div>\n                </div>\n                <div *ngIf="settingForm.controls.givenName" class="form-group">\n                    <div class="row align-items-center">\n                        <p class="col-md-4 py-2 text-md-right">{{ \'common.givenName\' | translate }}<span\n                                *ngIf="isRequired(\'givenName\')"\n                                class="badge badge-danger ml-2">{{ \'common.required\' | translate }}</span></p>\n                        <div class="col-md-8">\n                            <input type="text" class="form-control" formControlName="givenName" placeholder="\u30d4\u30af\u30c1\u30e3\u30fc">\n                            <div *ngIf="settingForm.controls.givenName.invalid && settingForm.controls.givenName.touched"\n                                class="mt-2">\n                                <p *ngIf="settingForm.controls.givenName.errors.required" class="text-danger">\n                                    {{ \'form.validation.required\' | translate }}</p>\n                                <p *ngIf="settingForm.controls.givenName.errors.maxlength" class="text-danger">\n                                    {{ \'form.validation.maxlength\' | translate: { value: settingForm.controls.givenName.errors.maxlength.requiredLength } }}\n                                </p>\n                                <p *ngIf="settingForm.controls.givenName.errors.pattern" class="text-danger">\n                                    {{ \'form.validation.fullKana\' | translate }}\n                                </p>\n                            </div>\n                        </div>\n                    </div>\n                </div>\n                <div *ngIf="settingForm.controls.email" class="form-group">\n                    <div class="row align-items-center">\n                        <p class="col-md-4 py-2 text-md-right">{{ \'common.email\' | translate }}<span\n                            *ngIf="isRequired(\'email\')"\n                            class="badge badge-danger ml-2">{{ \'common.required\' | translate }}</span></p>\n                        <div class="col-md-8">\n                            <input type="email" class="form-control" formControlName="email"\n                                placeholder="motionpicture@example.jp">\n                            <div *ngIf="settingForm.controls.email.invalid && settingForm.controls.email.touched"\n                                class="mt-2">\n                                <p *ngIf="settingForm.controls.email.errors.required" class="text-danger">\n                                    {{ \'form.validation.required\' | translate }}</p>\n                                <p *ngIf="settingForm.controls.email.errors.maxlength" class="text-danger">\n                                    {{ \'form.validation.maxlength\' | translate: { value: settingForm.controls.email.errors.maxlength.requiredLength } }}\n                                </p>\n                                <p *ngIf="settingForm.controls.email.errors.email" class="text-danger">\n                                    {{ \'form.validation.email\' | translate }}</p>\n                            </div>\n                        </div>\n                    </div>\n                </div>\n                <div *ngIf="settingForm.controls.telephone" class="form-group">\n                    <div class="row align-items-center">\n                        <p class="col-md-4 py-2 text-md-right">{{ \'common.telephone\' | translate }}<span\n                            *ngIf="isRequired(\'telephone\')"\n                            class="badge badge-danger ml-2">{{ \'common.required\' | translate }}</span></p>\n                        <div class="col-md-8">\n                            <input type="tel" class="form-control" formControlName="telephone" placeholder="0362778824">\n                            <div *ngIf="settingForm.controls.telephone.invalid && settingForm.controls.telephone.touched"\n                                class="mt-2">\n                                <p *ngIf="settingForm.controls.telephone.errors.required" class="text-danger">\n                                    {{ \'form.validation.required\' | translate }}</p>\n                                <p *ngIf="settingForm.controls.telephone.errors.minlength" class="text-danger">\n                                    {{ \'form.validation.minlength\' | translate: { value: settingForm.controls.telephone.errors.minlength.requiredLength } }}\n                                </p>\n                                <p *ngIf="settingForm.controls.telephone.errors.maxlength" class="text-danger">\n                                    {{ \'form.validation.minlength\' | translate: { value: settingForm.controls.telephone.errors.maxlength.requiredLength } }}\n                                </p>\n                                <p *ngIf="settingForm.controls.telephone.errors.telephone" class="text-danger">\n                                    {{ \'form.validation.telephone\' | translate }}</p>\n                            </div>\n                        </div>\n                    </div>\n                </div>\n                <div *ngIf="settingForm.controls.age" class="form-group">\n                    <div class="row align-items-center">\n                        <p class="col-md-4 py-2 text-md-right">{{ \'common.age\' | translate }}<span\n                            *ngIf="isRequired(\'age\')"\n                            class="badge badge-danger ml-2">{{ \'common.required\' | translate }}</span></p>\n                        <div class="col-md-8">\n                            <input type="tel" class="form-control" formControlName="age" placeholder="">\n                            <div *ngIf="settingForm.controls.age.invalid && settingForm.controls.age.touched"\n                                class="mt-2">\n                                <p *ngIf="settingForm.controls.age.errors.required" class="text-danger">\n                                    {{ \'form.validation.required\' | translate }}</p>\n                                <p *ngIf="settingForm.controls.age.errors.minlength" class="text-danger">\n                                    {{ \'form.validation.minlength\' | translate: { value: settingForm.controls.age.errors.minlength.requiredLength } }}\n                                </p>\n                                <p *ngIf="settingForm.controls.age.errors.maxlength" class="text-danger">\n                                    {{ \'form.validation.minlength\' | translate: { value: settingForm.controls.age.errors.maxlength.requiredLength } }}\n                                </p>\n                                <p *ngIf="settingForm.controls.age.errors.pattern" class="text-danger">\n                                    {{ \'form.validation.pattern\' | translate }}\n                                </p>\n                            </div>\n                        </div>\n                    </div>\n                </div>\n                <div *ngIf="settingForm.controls.address" class="form-group">\n                    <div class="row align-items-center">\n                        <p class="col-md-4 py-2 text-md-right">{{ \'common.address\' | translate }}<span\n                            *ngIf="isRequired(\'address\')"\n                            class="badge badge-danger ml-2">{{ \'common.required\' | translate }}</span></p>\n                        <div class="col-md-8">\n                            <input type="tel" class="form-control" formControlName="address" placeholder="">\n                            <div *ngIf="settingForm.controls.address.invalid && settingForm.controls.address.touched"\n                                class="mt-2">\n                                <p *ngIf="settingForm.controls.address.errors.required" class="text-danger">\n                                    {{ \'form.validation.required\' | translate }}</p>\n                                <p *ngIf="settingForm.controls.address.errors.minlength" class="text-danger">\n                                    {{ \'form.validation.minlength\' | translate: { value: settingForm.controls.age.errors.minlength.requiredLength } }}\n                                </p>\n                                <p *ngIf="settingForm.controls.address.errors.maxlength" class="text-danger">\n                                    {{ \'form.validation.minlength\' | translate: { value: settingForm.controls.age.errors.maxlength.requiredLength } }}\n                                </p>\n                                <p *ngIf="settingForm.controls.address.errors.pattern" class="text-danger">\n                                    {{ \'form.validation.pattern\' | translate }}\n                                </p>\n                            </div>\n                        </div>\n                    </div>\n                </div>\n                <div *ngIf="settingForm.controls.gender" class="form-group">\n                    <div class="row align-items-center">\n                        <p class="col-md-4 py-2 text-md-right">{{ \'common.gender.label\' | translate }}<span\n                            *ngIf="isRequired(\'gender\')"\n                            class="badge badge-danger ml-2">{{ \'common.required\' | translate }}</span></p>\n                        <div class="col-md-8">\n                            <select class="form-control" formControlName="gender">\n                                <option value="">{{ \'common.gender.unselected\' | translate }}</option>\n                                <option value="man">{{ \'common.gender.man\' | translate }}</option>\n                                <option value="woman">{{ \'common.gender.woman\' | translate }}</option>\n                            </select>\n                            <div *ngIf="settingForm.controls.gender.invalid && settingForm.controls.gender.touched"\n                                class="mt-2">\n                                <p *ngIf="settingForm.controls.gender.errors.required" class="text-danger">\n                                    {{ \'form.validation.required\' | translate }}</p>\n                                <p *ngIf="settingForm.controls.gender.errors.minlength" class="text-danger">\n                                    {{ \'form.validation.minlength\' | translate: { value: settingForm.controls.age.errors.minlength.requiredLength } }}\n                                </p>\n                                <p *ngIf="settingForm.controls.gender.errors.maxlength" class="text-danger">\n                                    {{ \'form.validation.minlength\' | translate: { value: settingForm.controls.age.errors.maxlength.requiredLength } }}\n                                </p>\n                                <p *ngIf="settingForm.controls.gender.errors.pattern" class="text-danger">\n                                    {{ \'form.validation.pattern\' | translate }}\n                                </p>\n                            </div>\n                        </div>\n                    </div>\n                </div>\n                <div class="form-group">\n                    <div class="row align-items-center">\n                        <p class="col-md-4 py-2 text-md-right">{{ \'setting.printer\' | translate }}</p>\n                        <div class="col-md-8">\n                            <select class="form-control" formControlName="printerType" (change)="changePrinterType()">\n                                <option *ngFor="let printer of printers" [value]="printer.connectionType">\n                                    {{ printer.name | translate }}</option>\n                            </select>\n                            <button\n                                *ngIf="this.settingForm.controls.printerType.value && this.settingForm.controls.printerType.value !== connectionType.None"\n                                type="button" class="btn btn-sm btn-primary py-2 mt-2"\n                                (click)="print()">{{ \'setting.testPrinting\' | translate }}</button>\n                        </div>\n                    </div>\n                </div>\n                <div class="form-group">\n                    <div class="row align-items-center">\n                        <p class="col-md-4 py-2 text-md-right">{{ \'setting.printerIpAddress\' | translate }}</p>\n                        <div class="col-md-8">\n                            <input type="text" class="form-control" formControlName="printerIpAddress"\n                                placeholder="0.0.0.0">\n                            <div *ngIf="settingForm.controls.printerIpAddress.invalid && settingForm.controls.printerIpAddress.touched"\n                                class="mt-2">\n                                <p *ngIf="settingForm.controls.printerIpAddress.errors.required" class="text-danger">\n                                    {{ \'form.validation.required\' | translate }}</p>\n                            </div>\n                            <p class="text-small mt-2">\n                                {{ \'setting.printerIpAddressDescription\' | translate }}\n                            </p>\n                        </div>\n                    </div>\n                </div>\n\n\n            </div>\n        </div>\n\n        <div class="buttons mx-auto text-center">\n            <button type="submit" [disabled]="isLoading | async" class="btn btn-primary btn-block py-3 mb-3"\n                (click)="onSubmit()">{{ \'setting.next\' | translate }}</button>\n            <button type="button" class="btn btn-link"\n                [routerLink]="environment.BASE_URL">{{ \'setting.prev\' | translate }}</button>\n        </div>\n    </form>\n</div>'},AL2A:function(e,t,n){"use strict";n.r(t);var r=n("An66"),s=n("kZht"),o=n("DSWM"),i=n("3kIJ"),a=n("1VvW"),l=n("ofez"),c=n("aDqW"),d=n("WxsR"),m=n("PIN6"),g=n("i7xV"),p=n("cHUu"),h=n("mOXJ"),v=n("UH/6"),u=function(e,t,n,r){var s,o=arguments.length,i=o<3?t:null===r?r=Object.getOwnPropertyDescriptor(t,n):r;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)i=Reflect.decorate(e,t,n,r);else for(var a=e.length-1;a>=0;a--)(s=e[a])&&(i=(o<3?s(i):o>3?s(t,n,i):s(t,n))||i);return o>3&&i&&Object.defineProperty(t,n,i),i},f=function(e,t){if("object"==typeof Reflect&&"function"==typeof Reflect.metadata)return Reflect.metadata(e,t)},F=function(e,t,n,r){return new(n||(n=Promise))((function(s,o){function i(e){try{l(r.next(e))}catch(t){o(t)}}function a(e){try{l(r.throw(e))}catch(t){o(t)}}function l(e){e.done?s(e.value):new n((function(t){t(e.value)})).then(i,a)}l((r=r.apply(e,t||[])).next())}))},y=function(e){return e&&e.__esModule?e:{default:e}};let I=class{constructor(e,t,n,r,s,o,i,a){this.formBuilder=e,this.store=t,this.utilService=n,this.userService=r,this.masterService=s,this.orderService=o,this.translate=i,this.router=a,this.printers=g.i,this.connectionType=g.a,this.viewType=g.h,this.environment=Object(m.a)()}ngOnInit(){return F(this,void 0,void 0,(function*(){this.user=this.store.pipe(Object(l.j)(h.i)),this.master=this.store.pipe(Object(l.j)(h.d)),this.error=this.store.pipe(Object(l.j)(h.b)),this.isLoading=this.store.pipe(Object(l.j)(h.c)),this.posList=[];try{yield this.masterService.getSellers(),yield this.masterService.getTheaters(),yield this.createSettlingForm()}catch(e){console.error(e),this.router.navigate(["/error"])}}))}createSettlingForm(){return F(this,void 0,void 0,(function*(){const e=this.environment.PROFILE;this.settingForm=this.formBuilder.group({theaterBranchCode:["",[i.g.required]],sellerId:["",[i.g.required]],posId:[""],printerType:[g.a.None],printerIpAddress:[""]}),e.forEach(e=>{const t=[];void 0!==e.required&&e.required&&t.push(i.g.required),void 0!==e.maxLength&&t.push(i.g.maxLength(e.maxLength)),void 0!==e.minLength&&t.push(i.g.minLength(e.minLength)),void 0!==e.pattern&&t.push(i.g.pattern(e.pattern)),"email"===e.key&&t.push(i.g.email),"telephone"===e.key&&t.push(e=>{const t=e.root.get("telephone");if(null!==t){if(""===t.value)return null;const e=new RegExp(/^\+/).test(t.value)?d.c(t.value):d.c(t.value,"JP");if(void 0===e.phone)return{telephone:!0};if(!d.b(e))return{telephone:!0}}return null}),this.settingForm.addControl(e.key,new i.b(e.value,t))});const t=yield this.userService.getData();void 0!==t.theater&&this.settingForm.controls.theaterBranchCode.setValue(t.theater.branchCode),void 0!==t.seller&&(this.settingForm.controls.sellerId.setValue(t.seller.id),this.changePosList()),void 0!==t.pos&&this.settingForm.controls.posId.setValue(t.pos.id);const n=t.customerContact;void 0!==n&&Object.keys(n).forEach(e=>{const t=n[e];void 0!==t&&void 0!==this.settingForm.controls[e]&&("telephone"!==e?this.settingForm.controls[e].setValue(t):this.settingForm.controls.telephone.setValue((new v.a).transform(t)))}),void 0!==t.printer&&(this.settingForm.controls.printerType.setValue(t.printer.connectionType),this.settingForm.controls.printerIpAddress.setValue(t.printer.ipAddress)),console.log(this.settingForm)}))}changePosList(){this.settingForm.controls.posId.setValue("");const e=this.settingForm.controls.sellerId.value;""!==e?this.master.subscribe(t=>{const n=t.sellers.find(t=>t.id===e);this.posList=void 0!==n?void 0===n.hasPOS?[]:n.hasPOS:[]}).unsubscribe():this.posList=[]}onSubmit(){return F(this,void 0,void 0,(function*(){if(Object.keys(this.settingForm.controls).forEach(e=>{this.settingForm.controls[e].markAsTouched()}),this.settingForm.invalid)this.utilService.openAlert({title:this.translate.instant("common.error"),body:this.translate.instant("setting.alert.validation")});else try{const e=yield this.masterService.getData(),t=this.settingForm.controls.theaterBranchCode.value,n=this.settingForm.controls.sellerId.value,r=this.settingForm.controls.posId.value,s=e.sellers.find(e=>e.id===n);if(void 0===s||void 0===s.hasPOS)throw new Error("seller not found").message;const o=s.hasPOS.find(e=>e.id===r),i=e.theaters.find(e=>e.branchCode===t);if(void 0===i)throw new Error("theater not found").message;this.userService.updateAll({seller:s,pos:o,theater:i,customerContact:{familyName:void 0===this.settingForm.controls.familyName?void 0:this.settingForm.controls.familyName.value,givenName:void 0===this.settingForm.controls.givenName?void 0:this.settingForm.controls.givenName.value,email:void 0===this.settingForm.controls.email?void 0:this.settingForm.controls.email.value,telephone:void 0===this.settingForm.controls.telephone?void 0:this.settingForm.controls.telephone.value,age:void 0===this.settingForm.controls.age?void 0:this.settingForm.controls.age.value,address:void 0===this.settingForm.controls.address?void 0:this.settingForm.controls.address.value,gender:void 0===this.settingForm.controls.gender?void 0:this.settingForm.controls.gender.value},printer:{ipAddress:this.settingForm.controls.printerIpAddress.value,connectionType:this.settingForm.controls.printerType.value}}),this.utilService.openAlert({title:this.translate.instant("common.complete"),body:this.translate.instant("setting.alert.success")})}catch(e){console.error(e)}}))}print(){return F(this,void 0,void 0,(function*(){const e={connectionType:this.settingForm.controls.printerType.value,ipAddress:this.settingForm.controls.printerIpAddress.value};try{yield this.orderService.print({orders:[],printer:e})}catch(t){console.error(t),this.utilService.openAlert({title:this.translate.instant("common.error"),body:`\n                <p class="mb-4">${this.translate.instant("setting.alert.print")}</p>\n                    <div class="p-3 bg-light-gray select-text">\n                    <code>${t}</code>\n                </div>`})}}))}changePrinterType(){this.settingForm.controls.printerType.value===g.a.StarBluetooth&&this.settingForm.controls.printerIpAddress.setValue(this.translate.instant("setting.starBluetoothAddress"))}isRequired(e){return void 0!==this.environment.PROFILE.find(t=>t.key===e&&t.required)}};I.ctorParameters=()=>[{type:i.a},{type:l.b},{type:p.k},{type:p.j},{type:p.d},{type:p.e},{type:c.c},{type:a.b}],I=u([Object(s.n)({selector:"app-setting",template:y(n("744H")).default,styles:[y(n("uSBn")).default]}),f("design:paramtypes",[i.a,l.b,p.k,p.j,p.d,p.e,c.c,a.b])],I);var b=function(e,t,n,r){var s,o=arguments.length,i=o<3?t:null===r?r=Object.getOwnPropertyDescriptor(t,n):r;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)i=Reflect.decorate(e,t,n,r);else for(var a=e.length-1;a>=0;a--)(s=e[a])&&(i=(o<3?s(i):o>3?s(t,n,i):s(t,n))||i);return o>3&&i&&Object.defineProperty(t,n,i),i};const x=[{path:"",component:n("RRjC").a,children:[{path:"",component:I}]}];let q=class{};q=b([Object(s.I)({imports:[a.c.forChild(x)],exports:[a.c]})],q),n.d(t,"SettingModule",(function(){return N}));let N=class{};N=function(e,t,n,r){var s,o=arguments.length,i=o<3?t:null===r?r=Object.getOwnPropertyDescriptor(t,n):r;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)i=Reflect.decorate(e,t,n,r);else for(var a=e.length-1;a>=0;a--)(s=e[a])&&(i=(o<3?s(i):o>3?s(t,n,i):s(t,n))||i);return o>3&&i&&Object.defineProperty(t,n,i),i}([Object(s.I)({declarations:[I],imports:[r.b,q,o.a]})],N)},uSBn:function(e,t,n){"use strict";n.r(t),t.default=""}}]);